---
interface Rider {
    number: string;
    name: string;
    team: string;
    points: number;
    color: string;
}

const fetchClassification = async () => {
    try {
        const response = await fetch(
            "https://mototiming.live/api/stat/standings-stats?class=MotoGP",
        );
        if (!response.ok) {
            throw new Error(
                `Network response was not ok: ${response.statusText}`,
            );
        }
        const standings_data = await response.json();
        return standings_data.data.find(
            (r: any) => r.race.name == standings_data.last_race,
        );
    } catch (error) {
        console.error("Error fetching events:", error);
        return null;
    }
};

const classification = await fetchClassification();

let standings: Rider[] = [];

if (classification) {
    standings = classification.ranking
        .map((rider_number: string) => {
            const rider: any = Object.values(classification.riders).find(
                (r: any) => r.number === rider_number,
            );
            return rider
                ? {
                      number: rider.number,
                      name: rider.name,
                      team: rider.team,
                      points: rider.season.points.total,
                      color: rider.color,
                  }
                : null;
        })
        .filter((rider: any): rider is Rider => rider !== null);
}

// Function to determine if the text color should be red or black
const getTextColor = (backgroundColor: string) => {
    if(backgroundColor == null) return 'text-black';
  const hex = backgroundColor.replace('#', '');
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;
  return brightness > 128 ? 'text-black' : 'text-white';
};
---
<section class="bg-white pt-10 md:mx-20">
    <div class="text-center text-2xl font-bold pb-5">MotoGP Standings</div>
    <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="pl-2 text-center py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Pos.</th>
            <th class="py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Number</th>
            <th class="py-3 pl-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Team</th>
            <th class="py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Points</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {standings.map((rider,index) => (
            <tr id={rider.number} class="hover:bg-gray-100">
              <td class="py-4 whitespace-nowrap md:text-xl text-center text-sm font-medium text-gray-900">{index + 1}</td>
              <td class="flex py-4 px-2 whitespace-nowrap text-center justify-center text-sm font-medium text-gray-900">
                <div class={`w-10 text-sm lg:text-xl h-full flex font-black items-center justify-center rounded ${getTextColor(rider.color)}`} style={`background-color: ${rider.color}`}>
                  {rider.number}
                </div>
            </td>
              <td class="pl-3 py-4 whitespace-nowrap text-base md:text-xl font-bold text-gray-500">{rider.name}</td>
              <td class="py-4 whitespace-nowrap text-sm text-gray-500 hidden lg:table-cell">{rider.team}</td>
              <td class="py-4 whitespace-nowrap text-center md:text-xl text-gray-500 font-black">{rider.points}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
</section>
