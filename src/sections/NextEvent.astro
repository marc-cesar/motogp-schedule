---
import dayjs from 'dayjs';

const fetchEvents = async () => {
  try {
    const response = await fetch('https://mototiming.live/api/schedule?filter=upcoming');
    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }
    const data = await response.json();
    console.log(data.calendar[0]);
    return data.calendar[0];
  } catch (error) {
    console.error('Error fetching events:', error);
    return [];
  }
};

const fetchEventSchedule = async (eventId : any) => {
  try {
    const response = await fetch(`https://mototiming.live/api/schedule?event=${eventId}`);
    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching event schedule:', error);
    return [];
  }
};

const closestEvent = await fetchEvents();
const eventSchedule = await fetchEventSchedule(closestEvent.id);
const mainEvents = eventSchedule.sessions.filter((session : any) => session.class === 'MotoGP');
const fp1 = mainEvents.find((session : any) => session.session_short_name === 'FP1');
const fp2 = mainEvents.find((session : any) => session.session_short_name === 'FP2');
const q1 = mainEvents.find((session : any) => session.session_short_name === 'Q1');
const q2 = mainEvents.find((session : any) => session.session_short_name === 'Q2');
const sprint = mainEvents.find((session : any) => session.session_short_name === 'SPR');
const race = mainEvents.find((session : any) => session.session_short_name === 'RAC');

console.log(closestEvent);
var isSameWeek = dayjs().isSame(dayjs(closestEvent.start_date),"week")
console.log(eventSchedule);

// Format the date as DD-MM-YYYY
const formattedStartDate = formatDate(closestEvent.start_date);
const formattedEndDate = formatDate(closestEvent.end_date);

function formatDate(isoTimestamp : any) {
    // Convert the ISO timestamp to a Date object
    const date = new Date(isoTimestamp);

    // Extract the day, month, and year
    const day = String(date.getUTCDate()).padStart(2, '0');
    const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Months are zero-indexed
    const year = date.getUTCFullYear();

    // Format the date as DD-MM-YYYY
    return `${day}/${month}/${year}`;
}

function formatHour(dateString : any) {
  const date = new Date(dateString);
  // Function to pad single digit numbers with leading zero
  const padZero = (num:any) => (num < 10 ? '0' + num : num);
  // Get local date components
  const day = padZero(date.getDate());
  const month = padZero(date.getMonth() + 1); // Months are zero-based
  const year = date.getFullYear();
  const hours = padZero(date.getHours());
  const minutes = padZero(date.getMinutes());

  return `${day}/${month}/${year} ${hours}:${minutes}`;
}
---
<section class="bg-black p-10">
    <div class="min-h-52 flex flex-col w-full justify-center">
            <h2 class="w-full text-white pb-10 font-semibold text-4xl uppercase text-center">Next event</h2>
            <div class="flex flex-col md:flex-row flex-grow justify-center items-start w-full max-w-screen-xl mx-auto">
                <div class="flex flex-col items-center flex-1 p-4 border-b md:border-b-0 border-gray-500 md:h-full">
                    <h3 class="text-white text-3xl text-center pb-3 font-semibold">{closestEvent.name ?? ""}</h3>
                    <p class="text-white text-2xl p-4 text-center">{formattedStartDate ?? ""} - {formattedEndDate}</p>
                    <p class="text-4xl text-red-500">{isSameWeek ? "RACE WEEK" : ""}</p>
                </div>
                <div class="flex flex-col text-center items-center md:border-l flex-1 p-4 md:h-full w-full">
                    <p class="text-white text-lg">FP1: {formatHour(fp1?.start_datetime_local)} </p>
                    <p class="text-white text-lg">FP2: {formatHour(fp2?.start_datetime_local)}</p>
                    <p class="text-white text-lg">Q1: {formatHour(q1?.start_datetime_local)}</p>
                    <p class="text-white text-lg">Q2: {formatHour(q2?.start_datetime_local)}</p>
                    <p class="text-white text-lg">Sprint: {formatHour(sprint?.start_datetime_local)}</p>
                    <p class="text-white text-lg">Race: {formatHour(race?.start_datetime_local)}</p>
                </div>
            </div>
        </div>
    </div>
</section>